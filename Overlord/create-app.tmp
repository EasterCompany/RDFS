#! /usr/bin/python3
import sys
import atexit
import shutil
import getpass
import pathlib
import subprocess
from os import system as s, getcwd as _cwd, remove as rm, chdir
from os.path import exists, abspath

cpv = True if sys.version_info[1] >= 10 else False
cwd=_cwd()
n=None
install_success = False
file_path = abspath(__file__)
sudo_pass = None


def cmd(command, path=cwd):
  return subprocess.run(
    command,
    shell=True,
    cwd=path,
    capture_output=True,
    encoding='utf-8'
  )


def cleanup():
  global install_success
  try:
    rm(file_path)
    if n is not None:
      if exists(f"{cwd}/{n}") and not install_success:
        shutil.rmtree(f"{cwd}/{n}")
  except Exception:
    pass


atexit.register(cleanup)


try:
  s("clear")

  # Create project name
  print("\nWelcome to the Overlord Installer!\n")
  n=input("Project Name: ")
  print(f"\n> Creating Project: {n} @ {cwd}")
  p_dir = f"{cwd}/{n}"

  # Check if the directory already exists
  if exists(p_dir):
    print(
      f"  \33[1;31m⚠️ Directory with name '{n}' @ '{cwd}'   \n"
      "     already exists. Please chose a unique name.\33[0m\n"
    )
    atexit.unregister(cleanup)
    exit()

  # Download from `Prd` branch
  print("  \33[5;33m🔶\33[0m Downloading Overlord     ", end="\r")
  try:
    s(f"git clone --quiet --single-branch --branch Prd --depth=1 git@github.com:EasterCompany/Overlord.git {n}")
  except Exception as download_error:
    print(f"\n\n{download_error}\n\n"), rm(__file__), exit()
  print("  \33[1;32m✅ Successfully Downloaded  \33[0m")

  # Remove development artifacts
  print(f"\n> Installing Project: {n} @ {cwd}")
  print(f"  \33[5;33m🔶\33[0m Cleaning Source Code", end="\r")
  chdir(p_dir)
  shutil.rmtree("./.git")
  rm("./README.md")
  rm("./SECURITY.md")
  print(f"  \33[1;32m✅ Successfully Cleaned Source Code \33[0m")

  # Exit & instruct manual installation if Python is less than 3.10
  if not cpv:
    print(f"""
  ************************* ATTENTION *************************

  Overlord only supports Python 3.10 or greater and
  it looks like your system default at '/usr/bin/python3'
  is running on version '{sys.version_info[0]}.{sys.version_info[1]}'

  Unfortunately until this is fixed you'll need to install your
  Overlord application manually.

  You need to run this command from within your app directory:

  >> python3.10 core.py tools install

  you can replace 'python3.10' with whatever version you wish
  to use as long as it's a greater version

  We highly recommend Python 3.11 for it's huge performance
  benefits. Although this might not be available for you yet.

     You can get the latest version from the following link:
                https://www.python.org/downloads/

  *************************************************************
  """)
    install_success = True
    exit()

  # Check if pip is available
  pip_status = cmd(f"{sys.executable} -m pip")

  if "No module named pip" in str(pip_status.stderr):

    if sudo_pass is None:
      print("\n> Root Access Required to Install Dependencies")
      sudo_pass = getpass.getpass("  [sudo] Enter Password: ")

    print("\n> Installing Package Installer for Python (PIP)")
    print("  \33[5;33m🔶\33[0m Downloading & Installing", end="\r")
    cmd_status = cmd(f"echo {sudo_pass} | sudo -S apt-get install -y python3-pip")
    pip_status = cmd(f"{sys.executable} -m pip")

    if "No module named pip" not in str(pip_status.stderr):
      print("  \33[1;32m✅ Successfully Installed          \33[0m")
    else:
      print("  \33[1;31m⚠️ Failed to Install               \33[0m\n")
      print(
        "  \33[1;31m[ERROR]"
        "  The installer failed to acquire `python3-pip` you will need to\n"
        "  manually install pip for your python installation.\n"
        "  on most systems this can be done by running:\n\n"
        "  >> sudo apt-get install python3-pip\n\n"
        "  Once you have installed pip run the `create-app` command again.\33[0m\n"
      )
      exit()

  else:
    print("  \33[1;32m✅ Python3-pip is Installed \33[0m")

  # Check if venv is available
  venv_status = cmd(f"{sys.executable} -m venv")

  if "No module named venv" in str(venv_status.stderr):
    if sudo_pass is None:
      print("\n> Root Access Required to Install Dependencies")
      sudo_pass = getpass.getpass("  [sudo] Enter Password: ")

    print("\n> Installing Python Package for Virtual Environments")
    print("  \33[5;33m🔶\33[0m Downloading & Installing", end="\r")
    cmd_status = cmd(f"echo {sudo_pass} | sudo -S apt-get install -y python3-venv")
    venv_status = cmd(f"{sys.executable} -m venv")

    if "No module named venv" not in str(venv_status.stderr):
      print("  \33[1;32m✅ Successfully Installed          \33[0m")
    else:
      print("  \33[1;31m⚠️ Failed to Install               \33[0m\n")
      print(
        "  \33[1;31m[ERROR]"
        "  The installer failed to acquire `python3-venv` you will need to\n"
        "  manually install venv for your python installation.\n"
        "  on most systems this can be done by running:\n\n"
        "  >> sudo apt-get install python3-venv\n\n"
        "  or\n\n"
        "  >> python3 -m pip install venv\n\n"
        "  Once you have installed venv run the `create-app` command again.\33[0m\n"
      )
      exit()

  else:
    print("  \33[1;32m✅ Python3-venv is Installed \33[0m")

  # Set nvm installation requirement
  install_nvm = False

  # Check if node is available
  node_status = cmd("node -v")
  if len(node_status.stderr) > 0 and len(node_status.stdout) == 0:
    if sudo_pass is None:
      print("\n> Root Access Required to Install Dependencies")
      sudo_pass = getpass.getpass("  [sudo] Enter Password: ")
    print("\n> Installing Node")
    print("  \33[5;33m🔶\33[0m Downloading & Installing", end="\r")
    cmd_status = cmd(f"echo {sudo_pass} | sudo -S apt-get install -y nodejs")
    print("  \33[1;32m✅ Successfully Installed          \33[0m")

  # Check if npm is available
  npm_status = cmd("npm -v")
  if len(npm_status.stderr) > 0 and len(npm_status.stdout) == 0:
    if sudo_pass is None:
      print("\n> Root Access Required to Install Dependencies")
      sudo_pass = getpass.getpass("  [sudo] Enter Password: ")
    print("\n> Installing NPM")
    print("  \33[5;33m🔶\33[0m Downloading & Installing", end="\r")
    cmd_status = cmd(f"echo {sudo_pass} | sudo -S apt-get install -y npm")
    print("  \33[1;32m✅ Successfully Installed          \33[0m")

  # Verify node & npm were installed
  print("\n> Verifying Node & NPM")

  # Check if npm is available
  npm_status = cmd("npm -v")
  if len(npm_status.stderr) > 0 and len(npm_status.stdout) == 0:
    print("  \33[1;31m❌ Failed to Verify NPM\33[0m")
  else:
    print("  \33[1;32m✅ Verified NPM          \33[0m")

  # Check if node is available
  node_status = cmd("node -v")
  if len(node_status.stderr) > 0 and len(npm_status.stdout) == 0:
    print("  \33[1;31m❌ Failed to Verify Node\33[0m")
  else:
    print("  \33[1;32m✅ Verified Node          \33[0m")

  # Check if nginx is available
  nginx_status = cmd("nginx -v")
  if nginx_status.stderr.startswith('nginx version:') or nginx_status.stdout.startswith('nginx version:'):
    if sudo_pass is None:
      print("\n> Root Access Required to Install Dependencies")
      sudo_pass = getpass.getpass("  [sudo] Enter Password: ")
    print("\n> Installing Nginx")
    print("  \33[5;33m🔶\33[0m Downloading & Installing", end="\r")
    cmd_status = cmd(f"echo {sudo_pass} | sudo -S apt-get install -y nginx")
    print("  \33[1;32m✅ Successfully Installed          \33[0m")

  # Verify Nginx was installed
  print("\n> Verifying Nginx")
  nginx_status = cmd("node -v")
  if len(nginx_status.stderr) > 0 and len(nginx_status.stdout) == 0:
    print("  \33[1;31m❌ Failed to Verify Nginx\33[0m")
  else:
    print("  \33[1;32m✅ Verified Nginx          \33[0m")

  # Declare installation a success at this point
  install_success = True

  # Create virtual environment
  print("\n> Creating Virtual Environment")
  print("  \33[5;33m🔶\33[0m Building Environment", end="\r")
  cmd(f"{sys.executable} -m venv {n} --system-site-packages", path=p_dir)
  cmd(f"mv {n} .env", path=p_dir)
  print("  \33[1;32m✅ Successfully Created Environment\33[0m")

  # Install essential requirements
  print("\n> Installing Essential Requirements")
  print("  \33[5;33m🔶\33[0m Downloading & Installing", end="\r")
  cmd("./.env/bin/python -m pip install --no-warn-script-location -r ./core/requirements.txt", path=p_dir)
  print("  \33[1;32m✅ Successfully Installed          \33[0m")

  # Install developer requirements
  print("\n> Installing Developer Requirements")
  print("  \33[5;33m🔶\33[0m Downloading & Installing", end="\r")
  cmd(f"./.env/bin/python -m pip install --no-warn-script-location -r ./core/requirements.dev", path=p_dir)
  print("  \33[1;32m✅ Successfully Installed          \33[0m")

  # Install project
  print("\n> Installing Overlord")
  print("  \33[5;33m🔶\33[0m Installing", end="\r")
  cmd("./.env/bin/python core.py tools install", path=p_dir)

  # Declare success with no warnings
  if exists(f"{cwd}/{n}/o"):
    print("  \33[1;32m✅ Successfully Installed          \33[0m")
    print(f"  \33[1;32m✅ Your Project Was Setup Successfully   \n      @ {p_dir}\33[0m\n")
    print(
      f"  Enter the directory using \33[33mcd {n}\33[0m and then\n"
      "  Use the \33[33m./o\33[0m command to open the Overlord-CLI\n"
    )

  # Declare success with basic warning
  elif exists(f"{cwd}/{n}"):
    print(f"  \33[1;31m⚠️ Your Project Cannot be Installed    \n      @ {p_dir}\33[0m\n")
    print(
      f"     Enter the directory using 'cd {n}' and then run:\n\n"
      "     >> python3 core.py env\n\n"
      "     to complete the installation process manually.\n"
    )

except Exception as error:
  print("\n\nSorry, an unexpected fatal error was encountered.\nAborting Installation process...\n\n")
  print(error)
  print('\n\n')
  cleanup()

cleanup()
